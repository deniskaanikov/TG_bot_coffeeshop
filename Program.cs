// –î–∞–Ω–Ω–æ–µ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–∞ C#.
using System;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
using System.Collections.Generic;

// –≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.
using System.Threading.Tasks;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API.
using Telegram.Bot;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–æ—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
// –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Telegram Bot, —Ç–∞–∫–∏–µ –∫–∞–∫ Update, Message –∏ —Ç–¥.
using Telegram.Bot.Types;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram,–Ω–∞–ø—Ä–∏–º–µ—Ä, ReplyKeyboardMarkup.
using Telegram.Bot.Types.ReplyMarkups;

// –≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
using Telegram.Bot.Extensions;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–∞–º–∏

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å XML-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
using System.Xml.Linq;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º JSON
using Newtonsoft.Json.Linq;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ—É–ø—Ä–∞–≤–ª—è–µ–º—ã–º –∫–æ–¥–æ–º
using System.Runtime.InteropServices;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
using System.IO;

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
using System.Threading;


//–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
namespace ConsoleApp1

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Program
{
    class Program
    {
        //–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ botClient, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ —Å–æ–±–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ TelegramBotClient
        static ITelegramBotClient botClient;

        //–û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ Main, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
        static void Main(string[] args)
        {
            //–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ TelegramBotClient —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
            botClient = new TelegramBotClient("6459137619:AAEExP-mctMCdqoSyo84OZwK9h9kWGBjc0Y");
            //–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ StartReceiving.
            //–í –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –º–µ—Ç–æ–¥—ã Update –∏ Error,
            //–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            botClient.StartReceiving(Update, Error);

            //–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏,
            //—á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            Console.WriteLine("Coffee Bot is running...");
            Console.ReadLine();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Å++ (—Ç–æ —á—Ç–æ –≤—ã—à–µ - static void Main...)
        /*int main(int argc, char* argv[])
        {
                botClient = new TelegramBotClient("6459137619:AAEExP-mctMCdqoSyo84OZwK9h9kWGBjc0Y");
                botClient.StartReceiving(Update, Error);

                cout << "Coffee Bot is running..." << endl;
                cin.get();
                return 0;
        }*/
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //–û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ Error, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
        private static Task Error(ITelegramBotClient botClient, Exception exception, CancellationToken token)
        {
            return Task.CompletedTask;
        }

        //–û–±—è–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ Update, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
        async static Task Update(ITelegramBotClient botClient, Update update, CancellationToken token)
        {


            var message = update.Message;

            if (message.Text != null)
            {
                Console.WriteLine($"Received a message from {message.Chat.FirstName}: {message.Text}");

                //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ Shops, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ñ–µ–µ–Ω.
                string[] Shops =
            {
               "‚òïÔ∏è Double B Coffee & Tea\r\nüìç–ê–¥—Ä–µ—Å: —É–ª. –ö–æ—Ä–æ–≤–∏–π –í–∞–ª, 5, –ë–¶ –û–∞–∑–∏—Å ‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –î–æ–±—Ä—ã–Ω–∏–Ω—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/76278365502 ",
               "‚òïÔ∏è –®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞\r\nüìç–ê–¥—Ä–µ—Å: –õ—é—Å–∏–Ω–æ–≤—Å–∫–∞—è —É–ª., 13, —Å—Ç—Ä. 1\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –î–æ–±—Ä—ã–Ω–∏–Ω—Å–∫–∞—è, –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/26904208882",
               "‚òïÔ∏è Stars Coffee\r\nüìç–ê–¥—Ä–µ—Å: —É–ª. –ö–æ—Ä–æ–≤–∏–π –í–∞–ª, 5\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –î–æ–±—Ä—ã–Ω–∏–Ω—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/23634903183",
               "‚òïÔ∏è Surf Coffee x Change\r\nüìç–ê–¥—Ä–µ—Å: –°—Ç—Ä–µ–º—è–Ω–Ω—ã–π –ø–µ—Ä., 38\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/213119274085e",
               "‚òïÔ∏è –ê—ç—Ä–æ–ø–ª–∞–Ω\r\nüìç–ê–¥—Ä–µ—Å: –ü—è—Ç–Ω–∏—Ü–∫–∞—è —É–ª., 65/10\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –î–æ–±—Ä—ã–Ω–∏–Ω—Å–∫–∞—è, –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/78369931480",
               "‚òïÔ∏è Coffee Inn\r\nüìç–ê–¥—Ä–µ—Å: –°–∞–¥–æ–≤–Ω–∏—á–µ—Å–∫–∞—è —É–ª., 8\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è, –¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/44357119989",
               "‚òïÔ∏è –ú–æ—Ä–µ–º—ç–π\r\nüìç–ê–¥—Ä–µ—Å: –ê–±–µ–ª—å–º–∞–Ω–æ–≤—Å–∫–∞—è —É–ª., 7\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–∞—è –ó–∞—Å—Ç–∞–≤–∞, –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/110821349092",
               "‚òïÔ∏è –ö–æ—Ñ–µ–º–∞–Ω–∏—è\r\nüìç–ê–¥—Ä–µ—Å: –í–∞–ª–æ–≤–∞—è —É–ª., 35\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è, –î–æ–±—Ä—ã–Ω–∏–Ω—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/199540542944",
               "‚òïÔ∏è Coffee Bean\r\nüìç–ê–¥—Ä–µ—Å: –ü—è—Ç–Ω–∏—Ü–∫–∞—è —É–ª., 5\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è, –¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/1206747493",
               "‚òïÔ∏è Grass2Glass\r\nüìç–ê–¥—Ä–µ—Å: –°–∞–¥–æ–≤–Ω–∏—á–µ—Å–∫–∞—è —É–ª., 80\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –ü–∞–≤–µ–ª–µ—Ü–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/238480352704",
               "‚òïÔ∏è –ü—É—à–∫–∏–Ω—ä\r\nüìç–ê–¥—Ä–µ—Å: –¢–≤–µ—Ä—Å–∫–æ–π –±—É–ª., 26–ê\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –ü—É—à–∫–∏–Ω—Å–∫–∞—è, –ß–µ—Ö–æ–≤—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/1018907821",
               "‚òïÔ∏è –ë—É–ª–∫–∞ –∏ –ö–æ—Ñ–µ\r\nüìç–ê–¥—Ä–µ—Å: –ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è —É–ª., 32, —Å—Ç—Ä. 1\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/63066526906",
               "‚òïÔ∏è Fine\r\nüìç–ê–¥—Ä–µ—Å: —É–ª. –í–æ–ª—Ö–æ–Ω–∫–∞, 9, —Å—Ç—Ä. 2\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –ö—Ä–æ–ø–æ—Ç–∫–∏–Ω—Å–∫–∞—è, –ë–æ—Ä–æ–≤–∏—Ü–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/86874155230",
               "‚òïÔ∏è Siyai Coffee\r\nüìç–ê–¥—Ä–µ—Å: —É–ª. –ú–∞—Ä–æ—Å–µ–π–∫–∞, 6-8—Å1\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/69151398816",
               "‚òïÔ∏è Coffee One Love\r\nüìç–ê–¥—Ä–µ—Å: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ–≤—Å–∫–∏–π –ø–µ—Ä., 13, —Å—Ç—Ä. 13\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –≠–ª–µ–∫—Ç—Ä–æ–∑–æ–≤–æ–¥—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/100207003270",
               "‚òïÔ∏è Cofix\r\nüìç–ê–¥—Ä–µ—Å: –°—Ç—Ä–µ–º—è–Ω–Ω—ã–π –ø–µ—Ä., 35\r\n‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è\r\nüîó –ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏: https://yandex.ru/maps/org/100363144005"
            };
                //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ Drinks, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤.
                string[] Drinks =
                {
                "–ê–º–µ—Ä–∏–∫–∞–Ω–æ",
                "–õ–∞—Ç—Ç–µ",
                "–ö–∞–ø—É—á–∏–Ω–æ",
                "–†–∞—Ñ",
                "–§–ª—ç—Ç —É–∞–π—Ç",
                "–≠—Å–ø—Ä–µ—Å—Å–æ",
                "–ú–æ–∫–∫–æ",
                "–ú–∞–∫–∏–∞—Ç–æ",
                "–ì–ª—è—Å–µ",
                "–ú–∞—Ç—á–∞",
                "–ú–æ–∫–∞—á–∏–Ω–æ"
            };
                //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ Prices, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ —Ü–µ–Ω—ã –Ω–∞ –Ω–∞–ø–∏—Ç–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ—Ñ–µ—è—Ö.
                //–í –¥–≤—É–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ—Ñ–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ—Ñ–µ–π–Ω–µ.
                //–ü–æ —Å—Ç—Ä–æ–∫–∞–º –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ñ–µ–µ–Ω, –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ñ–µ. –ù–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫ –æ—Ç—Ä–∞–∂–µ–Ω—ã —Ü–µ–Ω—ã.
                //–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ = -1, –∑–Ω–∞—á–∏—Ç –≤ –∫–æ—Ñ–µ–π–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∏–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—Ñ–µ.
                int[,] Prices = new int[16, 11]
                {
                {100, 350, 350, 400, 300, 210, 200, -1, -1, -1, -1},
                {150, 270, 170, 250, 200, -1, 130, -1, -1, 230, -1},
                {-1, 300, 320, 360, 130, -1, 350, 355, -1, -1, -1},
                {220, 300, 300, 400, -1, -1, 300, -1, -1, -1, -1},
                {60, 95, 95, 170, 150, 85, 110, 95, -1, 110, 115},
                {-1, 350, 250, 400, 400, 300, 140, -1, 240, -1, 300},
                {120, 180, 150, 120, -1, 120, -1, -1, -1, -1, -1},
                {450, 600, 410, 590,-1,450, 400,320,-1,430,465},
                {210,320 ,320 ,270 ,280 ,-1 ,160 ,400 ,280 ,-1 ,-1},
                {120,210 ,210 ,250 ,-1 ,120 ,-1 ,-1 ,135 ,-1 ,-1},
                {340,490 ,400 ,-1 ,500 ,-1 ,-1 ,-1 ,450 ,500 ,-1},
                {200,350 ,320 ,320 ,-1 ,150 ,-1 ,-1 ,360 ,-1 ,-1},
                {200 ,330 ,300 ,-1,280 ,200, -1 ,230 ,-1 ,-1, 330},
                {-1,370,350,-1,130,-1,-1,300,400,315,-1},
                {-1,150,140,180,-1,-70,-1,-1,-1,-1,-1},
                {150,210,150,150,200,210,-1,-1,-1,290,220}
                };

                //–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π reply –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
                var reply = "";

                //–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
                string selectedDrink = "";

                //–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                string selectedPriceRange = "";

                //–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
                int selectedMinPrice = 0;
                int selectedMaxPrice = 0;

                // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
                message = update.Message;
                // –£—Å–ª–æ–≤–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–≤–µ–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è "/start".
                if (message.Text == "/start")
                {
                    reply = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ—Ñ–µ–π–Ω—é. –í—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–≤–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫:";
                    //–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ `SendTextMessageAsync` —É –æ–±—ä–µ–∫—Ç–∞ `botClient`,
                    //–∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ TelegramBotClient.
                    //–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API.
                    //`update.Message.Chat.Id` - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ `update.Message`.
                    //`reply` - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
                    //replyMarkup: GetCoffeeMenu() - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    //–î–∞–ª–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await botClient.SendTextMessageAsync(message.Chat.Id, reply, replyMarkup: GetCoffeeMenu());
                }

                // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–ø–∏—Ç–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–≤–µ–Ω –æ–¥–Ω–æ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤.
                else if (message.Text == "–†–∞—Ñ" ^ message.Text == "–§–ª—ç—Ç —É–∞–π—Ç" ^ message.Text == "–õ–∞—Ç—Ç–µ" ^ message.Text == "–≠—Å–ø—Ä–µ—Å—Å–æ" ^ message.Text == "–ê–º–µ—Ä–∏–∫–∞–Ω–æ" ^ message.Text == "–ö–∞–ø—É—á–∏–Ω–æ" ^ message.Text == "–ì–ª—è—Å–µ" ^ message.Text == "–ú–∞–∫–∏–∞—Ç–æ" ^ message.Text == "–ú–æ–∫–∞—á–∏–Ω–æ" ^ message.Text == "–ú–∞—Ç—á–∞" ^ message.Text == "–ú–æ–∫–∫–æ")
                {
                    // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–ø–∏—Ç–æ–∫ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π selectedDrink.
                    selectedDrink = message.Text;
                    // –í—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ.
                    Console.WriteLine($"–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫: {selectedDrink}");

                    //–°–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä `StreamWriter` –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –≤ —Ñ–∞–π–ª "selecteddrink.txt".
                    StreamWriter writer = new StreamWriter("C:\\Users\\User\\Downloads\\selecteddrink.txt");
                    //–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª.
                    writer.Write(selectedDrink);
                    //–ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
                    writer.Close();
                    //–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π reply —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    reply = "–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:";
                    //–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ `SendTextMessageAsync` —É –æ–±—ä–µ–∫—Ç–∞ `botClient`,
                    //–∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ TelegramBotClient.
                    //–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API.
                    //`update.Message.Chat.Id` - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ `update.Message`.
                    //`reply` - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
                    //replyMarkup: GetPriceRangeMenu() - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    //–î–∞–ª–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await botClient.SendTextMessageAsync(update.Message.Chat.Id, reply, replyMarkup: GetPriceRangeMenu());
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //—É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å++, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã—à–µ
                /*if (message.Text == "–†–∞—Ñ" || message.Text == "–§–ª—ç—Ç —É–∞–π—Ç" || message.Text == "–õ–∞—Ç—Ç–µ" || message.Text == "–≠—Å–ø—Ä–µ—Å—Å–æ" || message.Text == "–ê–º–µ—Ä–∏–∫–∞–Ω–æ" || message.Text == "–ö–∞–ø—É—á–∏–Ω–æ" || message.Text == "–ì–ª—è—Å–µ" || message.Text == "–ú–∞–∫–∏–∞—Ç–æ" || message.Text == "–ú–æ–∫–∞—á–∏–Ω–æ" || message.Text == "–ú–∞—Ç—á–∞" || message.Text == "–ú–æ–∫–∫–æ")
                {
                        selectedDrink = message.Text;
                        cout << "–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫: " << selectedDrink << endl;

                        ofstream writer("C:\\Users\\daani\\Downloads\\selecteddrink.txt");
                        writer << selectedDrink;
                        writer.close();
                        reply = "–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:";
                        botClient.SendTextMessageAsync(update.Message.Chat.Id, reply, replyMarkup: GetPriceRangeMenu());
                }*/
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                //–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–µ–ª–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                //–æ–¥–Ω–æ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
                else if (message.Text == "<150" ^ message.Text == "160-250" ^ message.Text == "260-350" ^ message.Text == ">350")
                {
                    //–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π selectedPriceRange
                    selectedPriceRange = message.Text;
                    //–í—ã–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
                    Console.WriteLine($"–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {selectedPriceRange}");
                    //–°–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä `StreamReader` –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ "selecteddrink.txt".
                    StreamReader reader = new StreamReader("C:\\Users\\User\\Downloads\\selecteddrink.txt");
                    //–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–µ–≥–æ, –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π selectedDrink
                    //–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    selectedDrink = reader.ReadToEnd();
                    //–í—ã–≤–æ–¥ selectedDrink –≤ –∫–æ–Ω—Å–æ–ª—å
                    Console.WriteLine(selectedDrink);

                    //–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–æ–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    reader.Close();

                    //–°–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω—É—é –∫–æ—Ñ–µ–π–Ω—é,
                    //–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ü–µ–Ω

                    //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω "<150"
                    if (message.Text == "<150")
                    {
                        //–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º selectedMinPrice –∏ selectedMaxPrice –∑–Ω–∞—á–µ–Ω–∏—è,
                        //—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—é (message.Text == "<150") –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                        selectedMinPrice = 0;
                        selectedMaxPrice = 150;

                        //–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ FindRecommendedCoffeeShop —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏,
                        //–∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é –∫–æ—Ñ–µ–π–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        //–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: selectedDrink - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–ø–∏—Ç–æ–∫,
                        //–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω–µ–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª selecteddrink.txt";
                        //Shops - —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∫–æ—Ñ–µ–µ–Ω, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ
                        //Drinks - —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ
                        //Prices –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Ü–µ–Ω, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ
                        //selectedMinPrice, selectedMaxPrice - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞

                        //–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π recommendedCoffeeShop.
                        string recommendedCoffeeShop = FindRecommendedCoffeeShop(selectedDrink, Shops, Drinks, Prices, selectedMinPrice, selectedMaxPrice);

                        //–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ recommendedCoffeeShop),
                        //—è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π,
                        //—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ—Ñ–µ–π–Ω—è.
                        if (recommendedCoffeeShop == "")
                        {
                            //reply –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª—è—é—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ—Ñ–µ–π–Ω—é.
                            reply = "–ú–Ω–µ –∂–∞–ª—å, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ—Ñ–µ–π–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.";
                        }

                        else
                        {
                            //reply –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –ø–æ—Å–µ—Ç–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–æ—Ñ–µ–π–Ω—é.
                            reply = $"–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ –ø–æ—Å–µ—Ç–∏—Ç—å —ç—Ç—É –∫–æ—Ñ–µ–π–Ω—é: \r\n{recommendedCoffeeShop}";
                        }
                    };

                    //–≠—Ç–∞ —É—Å–ª–æ–≤–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç–ª–∏—á–∞—é—â–µ–≥–æ—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
                    if (message.Text == "160-250")
                    {
                        //–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º selectedMinPrice –∏ selectedMaxPrice –∑–Ω–∞—á–µ–Ω–∏—è, 
                        //—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—é (message.Text == "160-250") –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                        selectedMinPrice = 160;
                        selectedMaxPrice = 250;


                        string recommendedCoffeeShop = FindRecommendedCoffeeShop(selectedDrink, Shops, Drinks, Prices, selectedMinPrice, selectedMaxPrice);

                        if (recommendedCoffeeShop == "")
                        {
                            reply = "–ú–Ω–µ –∂–∞–ª—å, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ—Ñ–µ–π–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.";
                        }

                        else
                        {
                            reply = $"–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ –ø–æ—Å–µ—Ç–∏—Ç—å —ç—Ç—É –∫–æ—Ñ–µ–π–Ω—é: \r\n{recommendedCoffeeShop}";
                        }
                    };

                    //–≠—Ç–∞ —É—Å–ª–æ–≤–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç–ª–∏—á–∞—é—â–µ–≥–æ—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
                    if (message.Text == "260-350")
                    {
                        //–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º selectedMinPrice –∏ selectedMaxPrice –∑–Ω–∞—á–µ–Ω–∏—è,
                        //—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—é (message.Text == "260-350") –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                        selectedMinPrice = 260;
                        selectedMaxPrice = 350;
                        string recommendedCoffeeShop = FindRecommendedCoffeeShop(selectedDrink, Shops, Drinks, Prices, selectedMinPrice, selectedMaxPrice);

                        if (recommendedCoffeeShop == "")
                        {
                            reply = "–ú–Ω–µ –∂–∞–ª—å, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ—Ñ–µ–π–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.";
                        }

                        else
                        {
                            reply = $"–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ –ø–æ—Å–µ—Ç–∏—Ç—å —ç—Ç—É –∫–æ—Ñ–µ–π–Ω—é: \r\n{recommendedCoffeeShop}";
                        }
                    };
                    //–≠—Ç–∞ —É—Å–ª–æ–≤–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç–ª–∏—á–∞—é—â–µ–≥–æ—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
                    if (message.Text == ">350")
                    {
                        //–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º selectedMinPrice –∏ selectedMaxPrice –∑–Ω–∞—á–µ–Ω–∏—è,
                        //—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—é (message.Text == ">350") –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                        selectedMinPrice = 350;
                        selectedMaxPrice = 1000;

                        string recommendedCoffeeShop = FindRecommendedCoffeeShop(selectedDrink, Shops, Drinks, Prices, selectedMinPrice, selectedMaxPrice);

                        if (recommendedCoffeeShop == "")
                        {
                            reply = "–ú–Ω–µ –∂–∞–ª—å, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ—Ñ–µ–π–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.";
                        }

                        else
                        {
                            reply = $"–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ –ø–æ—Å–µ—Ç–∏—Ç—å —ç—Ç—É –∫–æ—Ñ–µ–π–Ω—é: \r\n{recommendedCoffeeShop}";
                        }
                    };



                    //–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∫–æ—Ñ–µ–π–Ω–∏.
                    await botClient.SendTextMessageAsync(update.Message.Chat.Id, reply);

                    //–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Å–ª–æ–≤–∏—è–º (–Ω–µ "/start", –Ω–µ –≤—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞,
                    //–Ω–µ –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω),–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–ª–æ–∫ `else`.

                }
                else
                {
                    //reply –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    reply = "–Ø –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.";
                    //–ó–∞—Ç–µ–º —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ `SendTextMessageAsync` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑,
                    //–≤–∫–ª—é—á–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤ (replyMarkup: GetCoffeeMenu()).
                    await botClient.SendTextMessageAsync(update.Message.Chat.Id, reply, replyMarkup: GetCoffeeMenu());
                }

            }
        }
        //–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤.
        //–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫, –∏ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–∞–ª–µ–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫,
        //–∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ `ReplyKeyboardMarkup`, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ –º–µ–Ω—é.

        //`static ReplyKeyboardMarkup GetCoffeeMenu()` - –û–±—ä—è–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ `GetCoffeeMenu`,
        //–∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `ReplyKeyboardMarkup`. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤.
        static ReplyKeyboardMarkup GetCoffeeMenu()
        {
            //–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
            var buttons = new List<KeyboardButton[]>()
            {
                //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã `KeyboardButton[]`
                new[]
                {
                    //–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –∫–æ—Ñ–µ
                    new KeyboardButton("–†–∞—Ñ"),
                    new KeyboardButton("–§–ª—ç—Ç —É–∞–π—Ç"),
                    new KeyboardButton("–õ–∞—Ç—Ç–µ"),
                    new KeyboardButton("–≠—Å–ø—Ä–µ—Å—Å–æ"),
                    new KeyboardButton("–ê–º–µ—Ä–∏–∫–∞–Ω–æ"),
                },
                new[]
                {
                    new KeyboardButton("–ö–∞–ø—É—á–∏–Ω–æ"),
                    new KeyboardButton("–ì–ª—è—Å–µ"),
                    new KeyboardButton("–ú–∞–∫–∏–∞—Ç–æ"),
                    new KeyboardButton("–ú–æ–∫–∞—á–∏–Ω–æ"),
                    new KeyboardButton("–ú–∞—Ç—á–∞"),
                },
                new[]
                {
                    new KeyboardButton("–ú–æ–∫–∫–æ"),
                }
            };

            //–í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä `ReplyKeyboardMarkup`, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤. 
            return new ReplyKeyboardMarkup(buttons);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //–Ω–∞ —Å++
        /*ReplyKeyboardMarkup GetCoffeeMenu()
        {
                std::vector<std::vector<KeyboardButton>> buttons = {
                {
                        KeyboardButton("–†–∞—Ñ"),
                        KeyboardButton("–§–ª—ç—Ç —É–∞–π—Ç"),
                        KeyboardButton("–õ–∞—Ç—Ç–µ"),
                        KeyboardButton("–≠—Å–ø—Ä–µ—Å—Å–æ"),
                        KeyboardButton("–ê–º–µ—Ä–∏–∫–∞–Ω–æ")
                },
                {
                        KeyboardButton("–ö–∞–ø—É—á–∏–Ω–æ"),
                        KeyboardButton("–ì–ª—è—Å–µ"),
                        KeyboardButton("–ú–∞–∫–∏–∞—Ç–æ"),
                        KeyboardButton("–ú–æ–∫–∞—á–∏–Ω–æ"),
                        KeyboardButton("–ú–∞—Ç—á–∞")
                },
                {
                        KeyboardButton("–ú–æ–∫–∫–æ")
                }
            };

            return ReplyKeyboardMarkup(buttons);
        }*/
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        //–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —É—á–∞—Å—Ç–æ–∫ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
        //–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω,–∏ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫,
        //–∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ `ReplyKeyboardMarkup`, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ –º–µ–Ω—é.


        //`static ReplyKeyboardMarkup GetPriceRangeMenu()` - –û–±—ä—è–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ `GetPriceRangeMenu`,
        //–∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `ReplyKeyboardMarkup`.
        //–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
        static ReplyKeyboardMarkup GetPriceRangeMenu()
        {
            //–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
            var buttons = new List<KeyboardButton[]>()
            {
                //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã `KeyboardButton[]`
                new[]
                {
                    new KeyboardButton("<150"),
                    new KeyboardButton("160-250"),
                    new KeyboardButton("260-350"),
                    new KeyboardButton(">350"),
                }
            };

            //–í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä `ReplyKeyboardMarkup`, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
            return new ReplyKeyboardMarkup(buttons);
        }



        //–í –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –∫–æ–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ `FindRecommendedCoffeeShop`.
        //–ó–¥–µ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ –≤—ã–±–æ—Ä—É
        //—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –∫–æ—Ñ–µ–π–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.

        //–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ `FindRecommendedCoffeeShop` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `string` –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        // `selectedDrink` - –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–ø–∏—Ç–æ–∫,
        // `Shops` - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ–µ–Ω,
        // `Drinks` - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤,
        // `Prices` - –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ü–µ–Ω—ã –Ω–∞ –Ω–∞–ø–∏—Ç–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ—Ñ–µ–π–Ω—è—Ö,
        // `MinPrice` - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        // `MaxPrice` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

        static string FindRecommendedCoffeeShop(string selectedDrink, string[] Shops, string[] Drinks, int[,] Prices, int MinPrice, int MaxPrice)
        {
            //–°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª column —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é 16.
            //–≠—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫.
            int[] column = new int[16];

            //–°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π `possiblePrices` —Ç–∏–ø–∞ `int`. –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω,
            //–ø–æ–ø–∞–¥–∞—é—â–∏—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω.
            List<int> possiblePrices = new List<int>();

            //–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π `IDpossiblePrices` —Ç–∏–ø–∞ `int`. –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Ü–µ–Ω,
            //—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω.
            List<int> IDpossiblePrices = new List<int>();

            //–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å, —É–∫–∞–∑—ã–≤–∞—é—â–µ–≥–æ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–æ—Ñ–µ.
            Console.WriteLine("—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ—Ñ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //–Ω–∞ —Å++ (–∫–æ–¥ –Ω–∞ c# –Ω–∏–∂–µ)
            /*switch (selectedDrink)
            {
                case "–†–∞—Ñ":

                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i][3];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                            {
                            possiblePrices.push_back(column[i]);
                            IDpossiblePrices.push_back(i);
                        }
                    }
                    if (possiblePrices.size() > 0)
                    {
                        int minValue = possiblePrices[0];
                        int IDminValue = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.size(); i++)
                        {
                            if (possiblePrices[i] < minValue)
                            {
                                minValue = possiblePrices[i];
                                IDminValue = IDpossiblePrices[i];
                            }
                        }

                        cout << Shops[IDminValue] << endl;
                        return Shops[IDminValue];
                     }
                     else
                     {
                        return "";
                     }
            }*/
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

            //–°–ª–µ–¥—É—é—â–∏–π —É—á–∞—Å—Ç–æ–∫ –∫–æ–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ—Ñ–µ–π–Ω—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ü–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ
            //–≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ª–∏–±–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ—Ñ–µ–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

            //–ù–∏–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ `switch`, –∫–æ—Ç–æ—Ä—ã–π –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `selectedDrink`.
            //–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –∫–æ–¥–∞.
            switch (selectedDrink)
            {
                //Case –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ `selectedDrink` —Ä–∞–≤–Ω–æ "–†–∞—Ñ".
                case "–†–∞—Ñ":

                    //–í —ç—Ç–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ `column` –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ü–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞.
                    //Prices[i, 3] –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ü–µ–Ω–µ –¥–ª—è i-—Ç–æ–π –∫–æ—Ñ–µ–π–Ω–∏ –∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 3];
                    }
                    //–≠—Ç–æ—Ç —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–∂–¥–∞—è —Ü–µ–Ω–∞ –≤ –º–∞—Å—Å–∏–≤–µ `column` –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω.
                    for (int i = 0; i < 16; i++)
                    {
                        //–ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, —Ç–æ –æ–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ `possiblePrices` (—Ö—Ä–∞–Ω—è—â–∏–π —Ü–µ–Ω—ã) –∏
                        //—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ `IDpossiblePrices` (—Ö—Ä–∞–Ω—è—â–∏–π –∏–Ω–¥–µ–∫—Å—ã —Ü–µ–Ω, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω—É)
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    //–≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ `possiblePrices` –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ü–µ–Ω—ã.
                    //–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–ª–æ–∫ –∫–æ–¥–∞ –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –∏–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–ª–æ–∫ –ø–æ—Å–ª–µ `else`.
                    if (possiblePrices.Count > 0)
                    {

                        //–°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ `minValue` –∏ `IDminValue`, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                        //—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤.
                        int minValue = possiblePrices[0];
                        int IDminValue = IDpossiblePrices[0];

                        //–¶–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–∞—Ö `possiblePrices` –∏ `IDpossiblePrices`.
                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            //–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã –º–µ–Ω—å—à–µ, —á–µ–º —Ç–µ–∫—É—â–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤—ã–º
                            //–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ID —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `IDminValue`.
                            if (possiblePrices[i] < minValue)
                            {
                                minValue = possiblePrices[i];
                                IDminValue = IDpossiblePrices[i];
                            }

                        }
                        //–í—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ñ–µ–π–Ω–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –≤ –∫–æ–Ω—Å–æ–ª—å, –∞ –∑–∞—Ç–µ–º —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
                        Console.WriteLine(Shops[IDminValue]);
                        return Shops[IDminValue];
                    }
                    //–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ `possiblePrices` –ø—É—Å—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
                    else
                    {

                        return "";
                    }

                //–î–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö case –ø—Ä–∏–Ω—Ü–∏–ø –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω —Ç–æ–º—É, —á—Ç–æ –æ–ø–∏—Å–∞–Ω –≤—ã—à–µ

                case "–§–ª—ç—Ç —É–∞–π—Ç":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 4];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue1 = possiblePrices[0];
                        int IDminValue1 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue1)
                            {
                                minValue1 = possiblePrices[i];
                                IDminValue1 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue1]);
                        return Shops[IDminValue1];
                    }
                    else
                    {

                        return "";
                    }
                case "–õ–∞—Ç—Ç–µ":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 1];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue2 = possiblePrices[0];
                        int IDminValue2 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue2)
                            {
                                minValue2 = possiblePrices[i];
                                IDminValue2 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue2]);
                        return Shops[IDminValue2];
                    }
                    else
                    {

                        return "";
                    }
                case "–≠—Å–ø—Ä–µ—Å—Å–æ":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 5];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue3 = possiblePrices[0];
                        int IDminValue3 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue3)
                            {
                                minValue3 = possiblePrices[i];
                                IDminValue3 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue3]);
                        return Shops[IDminValue3];
                    }
                    else
                    {

                        return "";
                    }

                case "–ê–º–µ—Ä–∏–∫–∞–Ω–æ":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 0];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue4 = possiblePrices[0];
                        int IDminValue4 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue4)
                            {
                                minValue4 = possiblePrices[i];
                                IDminValue4 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue4]);
                        return Shops[IDminValue4];
                    }
                    else
                    {

                        return "";
                    }
                case "–ö–∞–ø—É—á–∏–Ω–æ":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 2];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue5 = possiblePrices[0];
                        int IDminValue5 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue5)
                            {
                                minValue5 = possiblePrices[i];
                                IDminValue5 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue5]);
                        return Shops[IDminValue5];
                    }
                    else
                    {

                        return "";
                    }
                case "–ì–ª—è—Å–µ":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 8];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue6 = possiblePrices[0];
                        int IDminValue6 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue6)
                            {
                                minValue6 = possiblePrices[i];
                                IDminValue6 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue6]);
                        return Shops[IDminValue6];
                    }
                    else
                    {

                        return "";
                    }
                case "–ú–∞–∫–∏–∞—Ç–æ":


                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 7];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue7 = possiblePrices[0];
                        int IDminValue7 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue7)
                            {
                                minValue7 = possiblePrices[i];
                                IDminValue7 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue7]);
                        return Shops[IDminValue7];
                    }
                    else
                    {

                        return "";
                    }

                case "–ú–æ–∫–∞—á–∏–Ω–æ":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 10];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue8 = possiblePrices[0];
                        int IDminValue8 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue8)
                            {
                                minValue8 = possiblePrices[i];
                                IDminValue8 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue8]);
                        return Shops[IDminValue8];
                    }
                    else
                    {

                        return "";
                    }
                case "–ú–∞—Ç—á–∞":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 9];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue9 = possiblePrices[0];
                        int IDminValue9 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue9)
                            {
                                minValue9 = possiblePrices[i];
                                IDminValue9 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue9]);
                        return Shops[IDminValue9];
                    }
                    else
                    {

                        return "";
                    }
                case "–ú–æ–∫–∫–æ":
                    for (int i = 0; i < 11; i++)
                    {
                        column[i] = Prices[i, 6];
                    }
                    for (int i = 0; i < 16; i++)
                    {
                        if (column[i] <= MaxPrice && column[i] >= MinPrice)
                        {
                            possiblePrices.Add(column[i]);
                            IDpossiblePrices.Add(i);
                        }

                    }
                    if (possiblePrices.Count > 0)
                    {

                        int minValue10 = possiblePrices[0];
                        int IDminValue10 = IDpossiblePrices[0];

                        for (int i = 1; i < possiblePrices.Count; i++)
                        {
                            if (possiblePrices[i] < minValue10)
                            {
                                minValue10 = possiblePrices[i];
                                IDminValue10 = IDpossiblePrices[i];
                            }

                        }

                        Console.WriteLine(Shops[IDminValue10]);
                        return Shops[IDminValue10];
                    }
                    else
                    {

                        return "";
                    }

                default:
                    return "";

            }


        }
    }
}
